# -*- coding: utf-8 -*-
"""app4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1u2CAxmxoacBmUbqFzMF4-pz8SrY4e03U
"""

import streamlit as st
import pandas as pd
import joblib
from prophet import Prophet
import matplotlib.pyplot as plt
from datetime import datetime, timedelta

# ========== CARREGANDO OS MODELOS ============#
model_occ = joblib.load('model_occ.pkl')
model_adr = joblib.load('model_adr.pkl')

# ========= STREAMLIT =========#
st.title("Previsão de Ocupação (OCC) e Diária Média (ADR)")

# Seleção de Datas
start_date = st.date_input("Data Inicial", datetime.today())
end_date = st.date_input("Data Final", datetime.today() + timedelta(days=30))

if start_date < end_date:
    # Gerar datas futuras
    future_dates = pd.date_range(start=start_date, end=end_date)
    future_df = pd.DataFrame(future_dates, columns=['ds'])

    # ==== Previsão de Ocupação (OCC) ====
    st.subheader("Previsão de Ocupação (OCC)")
    forecast_occ = model_occ.predict(future_df)
    forecast_occ['ds'] = forecast_occ['ds'].dt.date  # Remove a hora e mantém só a data

    # Exibição da Tabela
    st.write("**Tabela de Previsões - Ocupação (OCC)**")
    st.dataframe(forecast_occ[['ds', 'yhat']].rename(columns={'ds': 'Data', 'yhat': 'Previsão OCC'}))

    # Plot da Previsão
    fig1, ax1 = plt.subplots(figsize=(10, 5))
    ax1.plot(forecast_occ['ds'], forecast_occ['yhat'], label='Previsão OCC', color='blue', linestyle='--', marker='o')
    ax1.set_title("Previsão de Ocupação (OCC)")
    ax1.set_xlabel("Data")
    ax1.set_ylabel("Ocupação (%)")
    ax1.grid(True, linestyle='--', alpha=0.7)

    # Adicionando os valores nos pontos
    for i, txt in enumerate(forecast_occ['yhat']):
        ax1.annotate(f"{txt:.2f}", (forecast_occ['ds'][i], forecast_occ['yhat'][i]), textcoords="offset points", xytext=(0,5), ha='center')

    plt.legend()
    st.pyplot(fig1)

    # ==== Previsão de ADR ====#
    st.subheader("Previsão de Diária Média (ADR)")
    forecast_adr = model_adr.predict(future_df)
    forecast_adr['ds'] = forecast_adr['ds'].dt.date  # Remove a hora e mantém só a data

    # Exibição da Tabela
    st.write("**Tabela de Previsões - Diária Média (ADR)**")
    st.dataframe(forecast_adr[['ds', 'yhat']].rename(columns={'ds': 'Data', 'yhat': 'Previsão ADR'}))

    # Plot da Previsão
    fig2, ax2 = plt.subplots(figsize=(10, 5))
    ax2.plot(forecast_adr['ds'], forecast_adr['yhat'], label='Previsão ADR', color='orange', linestyle='--', marker='o')
    ax2.set_title("Previsão de Diária Média (ADR)")
    ax2.set_xlabel("Data")
    ax2.set_ylabel("Valor (R$)")
    ax2.grid(True, linestyle='--', alpha=0.7)

    # Adicionando os valores nos pontos
    for i, txt in enumerate(forecast_adr['yhat']):
        ax2.annotate(f"{txt:.2f}", (forecast_adr['ds'][i], forecast_adr['yhat'][i]), textcoords="offset points", xytext=(0,5), ha='center')

    plt.legend()
    st.pyplot(fig2)

else:
    st.error("A data final deve ser maior que a data inicial.")
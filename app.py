# -*- coding: utf-8 -*-
"""app10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/173_onu-mRf9aMCnphdRN0KzArbMl3p63
"""

import streamlit as st
import pandas as pd
import joblib
from prophet import Prophet
import plotly.graph_objects as go
from datetime import datetime

# ========== CARREGANDO OS MODELOS ============#
model_occ = joblib.load('model_occ.pkl')
model_adr = joblib.load('model_adr.pkl')

# ========= STREAMLIT =========#
st.title("Previsão de Ocupação (OCC) e Diária Média (ADR)")
st.subheader("Trabalho dedicado ao projeto de Machine Learning com previsões geradas pelo algoritmo Prophet")
st.write("Os dados utilizados para a previsão contemplam dois anos de atividade hoteleira real no município de Bauru - SP.")
st.write("Analisando o projeto completo observamos a tendência de aumento de Diária Média (ADR) com uma leve queda em Ocupação (OCC) ao longo do tempo.")
st.write("Nosso modelo foi capaz de acertar (apesar de ainda necessitar de melhorias) 60% da variável OCC e 79% da variável ADR.")
st.write("Para mais detalhes sobre o projeto, acesse o [repositório no GitHub](https://github.com/camitbueno/Forecast-Streamlit/tree/main).")

st.subheader("Comportamento da OCC aos dias de semana:")
st.image("OCC.png")

st.subheader("Tendência da ADR:")
st.image("tendencia ADR.png")

st.subheader("Modelo interativo de previsão:")

# ========= SELEÇÃO DE PERÍODO =========#
st.write("### Selecione o Período de Previsão:")
period_options = ["7 dias", "15 dias", "30 dias", "60 dias", "90 dias"]
selected_period = st.selectbox("Escolha o período:", period_options, index=0)  # Padrão: 7 dias

# ======== GERAÇÃO DAS DATAS ========#
days = int(selected_period.split()[0])
future_dates = pd.date_range(start=datetime.today(), periods=days)
future_df = pd.DataFrame(future_dates, columns=['ds'])

# ==== Previsão de Ocupação (OCC) ====#
st.subheader("Previsão de Ocupação (OCC)")
forecast_occ = model_occ.predict(future_df)
forecast_occ['ds'] = forecast_occ['ds'].dt.date  # Remove a hora e mantém só a data

# Exibição da Tabela
st.write("**Tabela de Previsões - Ocupação (OCC)**")
st.dataframe(forecast_occ[['ds', 'yhat']].rename(columns={'ds': 'Data', 'yhat': 'Previsão OCC'}))

# Gráfico interativo para OCC
fig1 = go.Figure()
fig1.add_trace(go.Scatter(
    x=forecast_occ['ds'],
    y=forecast_occ['yhat'],
    mode='lines+markers',
    name='Previsão OCC',
    line=dict(color='blue', dash='dash')
))
fig1.update_layout(
    title="Previsão de Ocupação (OCC)",
    xaxis_title="Data",
    yaxis_title="Ocupação (%)",
    hovermode='x unified'
)
st.plotly_chart(fig1)

# ==== Previsão de ADR ====#
st.subheader("Previsão de Diária Média (ADR)")
forecast_adr = model_adr.predict(future_df)
forecast_adr['ds'] = forecast_adr['ds'].dt.date  # Remove a hora e mantém só a data

# Exibição da Tabela
st.write("**Tabela de Previsões - Diária Média (ADR)**")
st.dataframe(forecast_adr[['ds', 'yhat']].rename(columns={'ds': 'Data', 'yhat': 'Previsão ADR'}))

# Gráfico interativo para ADR
fig2 = go.Figure()
fig2.add_trace(go.Scatter(
    x=forecast_adr['ds'],
    y=forecast_adr['yhat'],
    mode='lines+markers',
    name='Previsão ADR',
    line=dict(color='orange', dash='dash')
))
fig2.update_layout(
    title="Previsão de Diária Média (ADR)",
    xaxis_title="Data",
    yaxis_title="Valor (R$)",
    hovermode='x unified'
)
st.plotly_chart(fig2)